from sqlalchemy import create_engine, Column, Integer, float, String, ForeignKey, datetime, Table #Q?
from sqlalchemy.exe.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
# from datetime import datetime Q?

# Define the database URL (SQLite in this case)
DATABASE_URL = "sqlite:///school.db"

# Create an engine
engine = create_engine(DATABASE_URL)

# Base class for models
Base = declarative_base() 


data = request.get_json()
This line attempts to parse the incoming request data as JSON and store it in the variable data.

data = request.get_json()
This line retrieves the JSON payload from the request body and converts it into a Python dictionary.

parent = Parent(**data)
This line creates a new instance of the Parent class, using the data dictionary to provide keyword arguments to the constructor.
The **data syntax unpacks the dictionary, so it is equivalent to writing Parent(firstname=data['firstname'], middlename=data['middlename'], ...).

parent = Parent(**data)
parent.save()
This creates a new Parent object using the data from the JSON payload and saves it to the database.

return jsonify(parent.to_dict()), 201
This line returns a JSON response with the newly created parent object converted to a dictionary (parent.to_dict()) and a status code 201 (Created).


A JSON payload refers to the actual data that is transmitted over a network using JSON (JavaScript Object Notation) format. It's not typically about "stored" information in the sense of being saved permanently in a database or file. Instead, it's about data that is currently being sent from one system (client) to another (server) or between components within a system.
  
# class Address(Base): is it required?
#     """ Address model that represents address fields/attributes.
#     """
#     __tablename__ = "addresses"
    
#     id = Column(Integer, primary_key=True)
#     student_id = Column(Integer, ForeignKey("students.id"), nullable=False)
#     teacher_id = Column(Integer, ForeignKey("teachers.id"), nullable=False)
#     address = Column(String(100), nullable=False)
#     city = Column(String(100))
#     state = Column(String(100))
#     country = Column(String(100))

# class ClassorSection(Base):#Q?
#     """ Section model that represents section's fields/attributes.
#     """
#     __tablename__ = "sections"
    
#     id = Column(Integer, primary_key=True)
#     secname = Column(String(100), nullable=False, unique=True)
#     Assisgnment_id = relationship("Assisgnment", back_populates="term")


# Q, why you said me not to from .base import Base, Column, Integer, String, ForeignKey, datetime, relationship

# Summary
# One-to-Many:

# Use ForeignKey in the child table.
# Use relationship in the parent table.
# Many-to-Many:

# Use an association table with ForeignKey columns referencing both tables.
# Use relationship in both related tables.
# One-to-One:

# Use ForeignKey in one table.
# Use relationship in both tables with uselist=False.

# example
# class Student(Base):
#     __tablename__ = 'students'
#     id = Column(Integer, primary_key=True)
#     name = Column(String, nullable=False)
#     results = relationship('Result', backref='student')  # One student has many results

# class Result(Base):
#     __tablename__ = 'results'
#     id = Column(Integer, primary_key=True)
#     student_id = Column(Integer, ForeignKey('students.id'), nullable=False)  # Each result is linked to one student
#     teacher_id = Column(Integer, ForeignKey('teachers.id'), nullable=False)
#     subject_id = Column(Integer, ForeignKey('subjects.id'), nullable=False)
#     score = Column(Integer, nullable=False)
#     overall_rank = Column(Integer, nullable=True)
#     overall_average = Column(Float, nullable=True)
#     date = Column(DateTime, nullable=False, default=datetime.now)

# with backref

# class Parent(Base):
#     __tablename__ = 'parents'
#     id = Column(Integer, primary_key=True)
#     name = Column(String)
#     admin_id = Column(Integer, ForeignKey('administrators.id'))

# class Administrator(Base):
#     __tablename__ = 'administrators'
#     id = Column(Integer, primary_key=True)
#     name = Column(String)
#     parent = relationship("Parent", backref="admin")

# # Setting up the database
# engine = create_engine('sqlite:///:memory:')
# Base.metadata.create_all(engine)

# # Creating a session
# Session = sessionmaker(bind=engine)
# session = Session()

# # Adding some data
# admin = Administrator(name='Admin One')
# parent = Parent(name='Parent One', admin=admin)
# session.add(admin)
# session.add(parent)
# session.commit()

# # Querying the data
# queried_parent = session.query(Parent).first()
# print(queried_parent.admin.name)  # Output: Admin One

# queried_admin = session.query(Administrator).first()
# print(queried_admin.parent[0].name)  # Output: Parent One


# for   back_populates

# class Parent(Base):
#     __tablename__ = 'parents'
#     id = Column(Integer, primary_key=True)
#     name = Column(String)
#     admin_id = Column(Integer, ForeignKey('administrators.id'))
#     admin = relationship("Administrator", back_populates="parent")  # Define the relationship and back_populates

# class Administrator(Base):
#     __tablename__ = 'administrators'
#     id = Column(Integer, primary_key=True)
#     name = Column(String)
#     parent = relationship("Parent", back_populates="admin")  # Define the relationship and back_populates

# # Setting up the database
# engine = create_engine('sqlite:///:memory:')
# Base.metadata.create_all(engine)

# # Creating a session
# Session = sessionmaker(bind=engine)
# session = Session()

# # Adding some data
# admin = Administrator(name='Admin One')
# parent = Parent(name='Parent One', admin=admin)
# session.add(admin)
# session.add(parent)
# session.commit()

# # Querying the data
# queried_parent = session.query(Parent).first()
# print(queried_parent.admin.name)  # Output: Admin One

# queried_admin = session.query(Administrator).first()
# print(queried_admin.parent.name)  # Output: Parent One
# random